syntax = "proto3";
package co2Message;

message Co2Config {

    //optional string cO2Port = 1;          // serial port for CO2 monitor
    optional uint32 logLevel = 2;
    optional uint32 watchdogKickPeriod = 3; // How often to kick watchdog. should not be more than half WatchdogSec
    optional string sensorType = 4;         // K30, SCD30, etc. or "None" when testing on system with no sensor connected
    optional uint32 i2cBus = 5;             // I2C bus number for I2C device, e.g. SCD30. Lowest bus number with SCD30 connected
                                            // will be used if this file is missing.
    optional string sensorPort = 6;         // port or bus to which sensor is connected
} // end Co2Config

message NetConfig {

    optional string netDevice = 1;
    optional uint32 networkCheckPeriod = 2; // How often to test network connectivity (in seconds)
    optional uint32 netDeviceDownRebootMinTime = 3; // Minimum number of seconds network device should be down before reboot is initiated.
    optional uint32 netDownRebootMinTime = 4; // Minimum number of seconds network should be down before reboot is initiated.

} // end NetConfig

message UIConfig {

    optional string fbdev = 1;             // These will be used in preference to
    optional string mousedev = 2;          // respective environment variables (if set).
    optional string mousedrv = 3;          // 
    optional string mouserelative = 4;     // 
    optional string ttfDir = 6;            // dir where screen fonts are stored
    optional string bitmapDir = 7;         // dir where screen iamges are stored
    optional uint32 screenRefreshRate = 8; // Screen refresh rate in FPS
    optional uint32 screenTimeout = 9;     // Screen saver kicks in after this many seconds of inactivity

} // endUIConfig

message FanConfig {
    optional uint32 fanOnOverrideTime = 1; // Amount of time (minutes) fan stays on for manual override
    optional uint32 relHumFanOnThreshold = 2; // Rel Humidity threshold (%) above which fan starts
    optional uint32 cO2FanOnThreshold = 3; // CO2 threshold (ppm) above which fan starts

    enum FanOverride {
        AUTO = 0;
        MANUAL_OFF = 1;
        MANUAL_ON = 2;
    }

    optional FanOverride fanOverride = 4;
}

message RestartMsg {

    enum RestartType {
        RESTART = 0;
        REBOOT = 1;
        SHUTDOWN = 2;
    }

    optional RestartType restartType = 1;

} // end RestartMsg

message Co2State {

    optional uint32 temperature = 1; // in Celsius
    optional uint32 co2 = 2; // ppm
    optional uint32 relHumidity = 3; // percent

    message Timestamp {

      // Represents seconds of UTC time since Unix epoch
      // 1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to
      // 9999-12-31T23:59:59Z inclusive.
      optional int64 seconds = 1;

      // Non-negative fractions of a second at nanosecond resolution. Negative
      // second values with fractions must still have non-negative nanos values
      // that count forward in time. Must be from 0 to 999,999,999
      // inclusive.
      optional int32 nanos = 2;
    }
    optional Timestamp timestamp = 4;

    enum FanStates {
        option allow_alias = true;
        AUTO_OFF = 0;
        OFF = 0;
        AUTO_ON = 1;
        ON = 1;
        MANUAL_OFF = 3;
        MANUAL_ON = 4;
    }

    optional FanStates fanState = 5;

} // end Co2State

message NetState {
    enum NetStates {
        option allow_alias = true;
        START = 0;
        UP = 1;
        DOWN = 2;
        FAILED = 3;
        MISSING = 4;
        NO_NET_INTERFACE = 5;
        MAX_NET_STATE = 5;
    }

    optional NetStates netState = 1;
} // end NetState

message ThreadState {
    enum ThreadStates {
        option allow_alias = true;
        INIT = 0;
        AWAITING_CONFIG = 1;
        STARTED = 2;
        RUNNING = 3;
        STOPPING = 4;
        STOPPED = 5;
        FAILED = 6;
        HW_FAILED = 7;
        MAX_THREAD_STATE = 7;
    }
    optional ThreadStates threadState = 1;
} // end ThreadState

message Co2Message {

    enum Co2MessageType {
        option allow_alias = true;
        CO2_CFG = 0;
        NET_CFG = 1;
        UI_CFG = 2;
        FAN_CFG = 3;
        RESTART = 4;
        CO2_STATE = 5;
        NET_STATE = 6;
        THREAD_STATE = 7;
        TERMINATE = 8;
        MAX_MSG_TYPE = 8;        
    }
    
    optional Co2MessageType messageType = 1;
    
    oneof theMessage {
        Co2Config  co2Config = 2;
        NetConfig  netConfig = 3;
        UIConfig   uiConfig = 4;
        FanConfig  fanConfig = 5;
        RestartMsg restartMsg = 6;
        Co2State   co2State = 7;
        NetState   netState = 8;
        ThreadState threadState = 9;
    }

} // end Co2Message

message Co2PersistentStore {
    enum RestartReason {
        option allow_alias = true;
        STOP = 0;
        RESTART = 1;
        REBOOT_USER_REQ = 2;
        REBOOT = 3;
        SHUTDOWN_USER_REQ = 4;
        UNKNOWN = 5;
        CRASH = 5;
    }
    optional RestartReason restartReason = 1;

    // Represents seconds of UTC time since Unix epoch
    // 1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to
    // 9999-12-31T23:59:59Z inclusive.
    optional int64 timestampSeconds          = 2;

    optional uint32 numberOfRebootsAfterFail = 3;
    optional uint32 temperature              = 4; // in Celsius
    optional uint32 co2                      = 5; // ppm
    optional uint32 relHumidity              = 6; // percent
} // end Co2PersistentStore





